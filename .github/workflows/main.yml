name: Terraform Plan - Deploy and Test Lambda

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  terraform:
    name: Deploy AWS Infrastructure via Terraform
    runs-on: ubuntu-latest

    env:
      AWS_REGION: 'us-west-2'
      TERRAFORM_VERSION: '1.10.2'

    # These permissions are needed to interact with GitHub's OIDC Token endpoint.
    permissions:
      id-token: write # This is required for requesting the JWT
      contents: read # This is required for actions/checkout

    steps:
      # Step 1: Checkout the code
      - name: Checkout GitHub Repo
        uses: actions/checkout@v4

      # Step 2: Configure AWS Credentials using OIDC
      - name: Configure AWS Credentials with OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }} # use OIDC
          aws-region: ${{ env.AWS_REGION }}

      # Step 3: Install Terraform CLI
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      # Step 4: Initialize Terraform with setting up backend configs
      - name: Terraform Init
        env:
          AWS_BUCKET_NAME: ${{ secrets.AWS_TERRAFORM_STATE_BUCKET }}
          AWS_BUCKET_KEY_NAME: ${{ secrets.AWS_TERRAFORM_STATE_BUCKET_KEY_NAME }}
        run: terraform init -backend-config="bucket=${AWS_BUCKET_NAME}" -backend-config="key=${AWS_BUCKET_KEY_NAME}" -backend-config="region=${AWS_REGION}"

      # Step 5: Format Terraform
      - name: Terraform fmt
        run: terraform fmt -check
        continue-on-error: true

      # Step 6: Terraform Validation
      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      # Step 7: Plan Terraform Changes
      - name: Terraform Plan
        id: plan
        run: terraform plan
        if: github.event_name == 'pull_request'
        continue-on-error: true

      # Step 8: Check Plan Outcome
      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      # Step 9: Apply Terraform Changes
      - name: Terraform Apply
        if: github.ref == 'refs/heads/master' && github.event_name == 'push'
        run: terraform apply -auto-approve -input=false

  cypress-run:
    name: Perform E2E test against the deployed API
    needs: terraform
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Install npm dependencies, cache them correctly and run all Cypress tests
      - name: Cypress tests
        uses: cypress-io/github-action@v6
